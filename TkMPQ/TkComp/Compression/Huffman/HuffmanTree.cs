using System;
using TkLib;

namespace TkCompLib.Compression
{
    namespace HuffmanTree
    {
        internal class HuffmanTree
        {
            public static byte[][] WeightTables = {new byte[] {
                // Data for compression type 0x00
                0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00}, new byte[] {
                // Data for compression type 0x01
                0x54, 0x16, 0x16, 0x0D, 0x0C, 0x08, 0x06, 0x05, 0x06, 0x05, 0x06, 0x03, 0x04, 0x04, 0x03, 0x05,
                0x0E, 0x0B, 0x14, 0x13, 0x13, 0x09, 0x0B, 0x06, 0x05, 0x04, 0x03, 0x02, 0x03, 0x02, 0x02, 0x02,
                0x0D, 0x07, 0x09, 0x06, 0x06, 0x04, 0x03, 0x02, 0x04, 0x03, 0x03, 0x03, 0x03, 0x03, 0x02, 0x02,
                0x09, 0x06, 0x04, 0x04, 0x04, 0x04, 0x03, 0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 0x04,
                0x08, 0x03, 0x04, 0x07, 0x09, 0x05, 0x03, 0x03, 0x03, 0x03, 0x02, 0x02, 0x02, 0x03, 0x02, 0x02,
                0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x02, 0x01, 0x02, 0x02,
                0x06, 0x0A, 0x08, 0x08, 0x06, 0x07, 0x04, 0x03, 0x04, 0x04, 0x02, 0x02, 0x04, 0x02, 0x03, 0x03,
                0x04, 0x03, 0x07, 0x07, 0x09, 0x06, 0x04, 0x03, 0x03, 0x02, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02,
                0x0A, 0x02, 0x02, 0x03, 0x02, 0x02, 0x01, 0x01, 0x02, 0x02, 0x02, 0x06, 0x03, 0x05, 0x02, 0x03,
                0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x03, 0x01, 0x01, 0x01,
                0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x04, 0x04, 0x04, 0x07, 0x09, 0x08, 0x0C, 0x02,
                0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x03,
                0x04, 0x01, 0x02, 0x04, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01,
                0x04, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x01, 0x01, 0x02, 0x02, 0x02, 0x06, 0x4B,
                0x00, 0x00}, new byte[] {
                // Data for compression type 0x02
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x27, 0x00, 0x00, 0x23, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x01, 0x01, 0x06, 0x0E, 0x10, 0x04,
                0x06, 0x08, 0x05, 0x04, 0x04, 0x03, 0x03, 0x02, 0x02, 0x03, 0x03, 0x01, 0x01, 0x02, 0x01, 0x01,
                0x01, 0x04, 0x02, 0x04, 0x02, 0x02, 0x02, 0x01, 0x01, 0x04, 0x01, 0x01, 0x02, 0x03, 0x03, 0x02,
                0x03, 0x01, 0x03, 0x06, 0x04, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x02, 0x01, 0x01,
                0x01, 0x29, 0x07, 0x16, 0x12, 0x40, 0x0A, 0x0A, 0x11, 0x25, 0x01, 0x03, 0x17, 0x10, 0x26, 0x2A,
                0x10, 0x01, 0x23, 0x23, 0x2F, 0x10, 0x06, 0x07, 0x02, 0x09, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00}, new byte[] {
                // Data for compression type 0x03
                0xFF, 0x0B, 0x07, 0x05, 0x0B, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x01, 0x04, 0x02, 0x01, 0x03,
                0x09, 0x01, 0x01, 0x01, 0x03, 0x04, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01,
                0x05, 0x01, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x02, 0x01, 0x01, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01, 0x01,
                0x0A, 0x04, 0x02, 0x01, 0x06, 0x03, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x01, 0x01, 0x01,
                0x05, 0x02, 0x03, 0x04, 0x03, 0x03, 0x03, 0x02, 0x01, 0x01, 0x01, 0x02, 0x01, 0x02, 0x03, 0x03,
                0x01, 0x03, 0x01, 0x01, 0x02, 0x05, 0x01, 0x01, 0x04, 0x03, 0x05, 0x01, 0x03, 0x01, 0x03, 0x03,
                0x02, 0x01, 0x04, 0x03, 0x0A, 0x06, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x02, 0x02, 0x01, 0x0A, 0x02, 0x05, 0x01, 0x01, 0x02, 0x07, 0x02, 0x17, 0x01, 0x05, 0x01, 0x01,
                0x0E, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x06, 0x02, 0x01, 0x04, 0x05, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01,
                0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x07, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01, 0x01,
                0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x11,
                0x00, 0x00}, new byte[] {
                // Data for compression type 0x04
                0xFF, 0xFB, 0x98, 0x9A, 0x84, 0x85, 0x63, 0x64, 0x3E, 0x3E, 0x22, 0x22, 0x13, 0x13, 0x18, 0x17,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00}, new byte[] {
                // Data for compression type 0x05
                0xFF, 0xF1, 0x9D, 0x9E, 0x9A, 0x9B, 0x9A, 0x97, 0x93, 0x93, 0x8C, 0x8E, 0x86, 0x88, 0x80, 0x82,
                0x7C, 0x7C, 0x72, 0x73, 0x69, 0x6B, 0x5F, 0x60, 0x55, 0x56, 0x4A, 0x4B, 0x40, 0x41, 0x37, 0x37,
                0x2F, 0x2F, 0x27, 0x27, 0x21, 0x21, 0x1B, 0x1C, 0x17, 0x17, 0x13, 0x13, 0x10, 0x10, 0x0D, 0x0D,
                0x0B, 0x0B, 0x09, 0x09, 0x08, 0x08, 0x07, 0x07, 0x06, 0x05, 0x05, 0x04, 0x04, 0x04, 0x19, 0x18,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00}, new byte[] {
                // Data for compression type 0x06
                0xC3, 0xCB, 0xF5, 0x41, 0xFF, 0x7B, 0xF7, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xBF, 0xCC, 0xF2, 0x40, 0xFD, 0x7C, 0xF7, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x7A, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00}, new byte[] {
                // Data for compression type 0x07
                0xC3, 0xD9, 0xEF, 0x3D, 0xF9, 0x7C, 0xE9, 0x1E, 0xFD, 0xAB, 0xF1, 0x2C, 0xFC, 0x5B, 0xFE, 0x17,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xBD, 0xD9, 0xEC, 0x3D, 0xF5, 0x7D, 0xE8, 0x1D, 0xFB, 0xAE, 0xF0, 0x2C, 0xFB, 0x5C, 0xFF, 0x18,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x70, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00}, new byte[] {
                // Data for compression type 0x08
                0xBA, 0xC5, 0xDA, 0x33, 0xE3, 0x6D, 0xD8, 0x18, 0xE5, 0x94, 0xDA, 0x23, 0xDF, 0x4A, 0xD1, 0x10,
                0xEE, 0xAF, 0xE4, 0x2C, 0xEA, 0x5A, 0xDE, 0x15, 0xF4, 0x87, 0xE9, 0x21, 0xF6, 0x43, 0xFC, 0x12,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xB0, 0xC7, 0xD8, 0x33, 0xE3, 0x6B, 0xD6, 0x18, 0xE7, 0x95, 0xD8, 0x23, 0xDB, 0x49, 0xD0, 0x11,
                0xE9, 0xB2, 0xE2, 0x2B, 0xE8, 0x5C, 0xDD, 0x15, 0xF1, 0x87, 0xE7, 0x20, 0xF7, 0x44, 0xFF, 0x13,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x5F, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00}};

            private const int LINK_ITEM_COUNT = 0x80;

            private class TInputStream {
                public int BitBuffer, BitCount;
                public bool EndOfStream;
                FixedStream Stream;
                
                public TInputStream(FixedStream stream) {
                    BitBuffer = BitCount = 0;
                    EndOfStream = false;
                    Stream = stream;
                }

                public int Get1Bit() {
                    if(BitCount == 0) {
                        BitBuffer = GetByte();
                        BitCount = 8;
                    }
                    int OneBit = (BitBuffer & 0x01);
                    BitBuffer >>= 1;
                    BitCount--;
                    return OneBit;
                }

                public int Peek7Bits() {
                    if(BitCount < 7) {
                        int dwReloadByte = GetByte();
                        BitBuffer |= dwReloadByte << BitCount;
                        BitCount += 8;
                    }
                    return (BitBuffer & 0x7F);
                }

                public int Get8Bits() {
                    if(BitCount < 8) {
                        int dwReloadByte = GetByte();
                        BitBuffer |= dwReloadByte << BitCount;
                        BitCount += 8;
                    }
                    int dwOneByte = (BitBuffer & 0xFF);
                    BitBuffer >>= 8;
                    BitCount -= 8;
                    return dwOneByte;
                }

                public void SkipBits(int dwBitsToSkip) {
                    if(BitCount < dwBitsToSkip) {
                        int dwReloadByte = GetByte();
                        BitBuffer |= dwReloadByte << BitCount;
                        BitCount += 8;
                    }

                    BitBuffer >>= (int)dwBitsToSkip;
                    BitCount -= dwBitsToSkip;
                }

                //Read One Byte
                private byte GetByte() {
                    byte data;
                    if(Stream.Read(out data)) EndOfStream = true;
                    return data;
                }
            };

            private class TOutputStream {
                int BitBuffer, BitCount;
                FixedStream Stream;

                public TOutputStream(FixedStream stream) {
                    BitBuffer = BitCount = 0;
                    Stream = stream;
                }

                public bool PutBits(int dwValue, int nBitCount) {
                    BitBuffer |= dwValue << BitCount;
                    BitCount += nBitCount;

                    while(BitCount >= 8) {
                        if(Stream.Write((byte)BitBuffer)) return true;
                        BitBuffer >>= 8;
                        BitCount -= 8;
                    }
                    return false;
                }

                public bool Flush() {
                    while(BitCount != 0) {
                        if(Stream.Write((byte)BitBuffer)) return true;
                        BitBuffer >>= 8;
                        BitCount -= ((BitCount > 8) ? 8 : BitCount);
                    }
                    return false;
                }
            };

            private struct TQuickLink {
                public int ValidValue, ValidBits;
                public THTreeItem pItem;
                public int DecompressedValue;
            }

            private class THTreeItem {
                public THTreeItem pNext, pPrev;
                public int DecompressedValue, Weight;
                public THTreeItem pParent, pChildLo;

                public THTreeItem() {
                    pChildLo = pParent = pPrev = pNext = null;
                    DecompressedValue = Weight = 0;
                }

                public void RemoveItem() {
                    if(pNext == null) return;
                    pPrev.pNext = pNext;
                    pNext.pPrev = pPrev;
                    pNext = pPrev = null;
                }
            }

            TQuickLink[] QuickLinks = new TQuickLink[LINK_ITEM_COUNT];
            THTreeItem[] ItemsByByte = new THTreeItem[0x102];
            THTreeItem MainItem = new THTreeItem();
            FixedStream sIn, sOut;
            int MinValidValue;
            bool bIsCmp0;

            public HuffmanTree(FixedStream In, FixedStream Out) {
                MainItem.pNext = MainItem.pPrev = MainItem;
                MinValidValue = 1;
                bIsCmp0 = false;
                sOut = Out;
                sIn = In;
            }

            private void LinkTwoItems(THTreeItem pItem1, THTreeItem pItem2) {
                pItem2.pNext = pItem1.pNext;
                pItem2.pPrev = pItem1.pNext.pPrev;
                pItem1.pNext.pPrev = pItem2;
                pItem1.pNext = pItem2;
            }

            private void InsertItem(THTreeItem pNewItem, bool InsertAfter, THTreeItem pInsertPoint) {
                pNewItem.RemoveItem();
                if(pInsertPoint == null) pInsertPoint = MainItem;

                if(InsertAfter)
                    LinkTwoItems(pInsertPoint, pNewItem);
                else {
                    pNewItem.pNext = pInsertPoint;
                    pNewItem.pPrev = pInsertPoint.pPrev;
                    pInsertPoint.pPrev.pNext = pNewItem;
                    pInsertPoint.pPrev = pNewItem;
                }
            }

            private THTreeItem FindHigherOrEqualItem(THTreeItem pItem, int Weight) {
                if(pItem != null)
                    while(pItem != MainItem) {
                        if(Weight <= pItem.Weight) return pItem;
                        pItem = pItem.pPrev;
                    }
                return MainItem;
            }

            private THTreeItem CreateNewItem(int DecompressedValue, int Weight, bool InsertAfter) {
                THTreeItem pNewItem = new THTreeItem();
                InsertItem(pNewItem, InsertAfter, null);
                pNewItem.DecompressedValue = DecompressedValue;
                pNewItem.Weight = Weight;
                pNewItem.pParent = null;
                pNewItem.pChildLo = null;
                return pNewItem;
            }

            int FixupItemPosByWeight(THTreeItem pNewItem, int MaxWeight) {
                if(pNewItem.Weight < MaxWeight) {
                    THTreeItem pHigherItem = FindHigherOrEqualItem(MainItem.pPrev, pNewItem.Weight);
                    pNewItem.RemoveItem();
                    LinkTwoItems(pHigherItem, pNewItem);
                } else
                    MaxWeight = pNewItem.Weight;
                return MaxWeight;
            }

            private void BuildTree(int CompressionType) {
                THTreeItem pNewItem, pChildLo, pChildHi;
                byte[] WeightTable;
                int MaxWeight = 0;
                Array.Clear(ItemsByByte, 0, ItemsByByte.Length);
                WeightTable = WeightTables[CompressionType & 0x0F];
                for(int i = 0; i < 0x100; i++) if(WeightTable[i] != 0) {
                        ItemsByByte[i] = pNewItem = CreateNewItem(i, WeightTable[i], true);
                        MaxWeight = FixupItemPosByWeight(pNewItem, MaxWeight);
                    }

                ItemsByByte[0x100] = CreateNewItem(0x100, 1, false);
                ItemsByByte[0x101] = CreateNewItem(0x101, 1, false);

                pChildLo = MainItem.pPrev;

                while(pChildLo != MainItem) {
                    pChildHi = pChildLo.pPrev;
                    if(pChildHi == MainItem) break;
                    pNewItem = CreateNewItem(0, pChildHi.Weight + pChildLo.Weight, true);

                    pChildLo.pParent = pNewItem;
                    pChildHi.pParent = pNewItem;
                    pNewItem.pChildLo = pChildLo;

                    MaxWeight = FixupItemPosByWeight(pNewItem, MaxWeight);
                    pChildLo = pChildHi.pPrev;
                }
                MinValidValue = 1;
            }

            private void IncWeightsAndRebalance(THTreeItem pItem) {
                THTreeItem pHigherItem, pChildHi, pChildLo, pParent;

                for(; pItem != null; pItem = pItem.pParent) {
                    pItem.Weight++;
                    pHigherItem = FindHigherOrEqualItem(pItem.pPrev, pItem.Weight);
                    pChildHi = pHigherItem.pNext;

                    if(pChildHi != pItem) {
                        pChildHi.RemoveItem();
                        LinkTwoItems(pItem, pChildHi);

                        pItem.RemoveItem();
                        LinkTwoItems(pHigherItem, pItem);

                        pChildLo = pChildHi.pParent.pChildLo;
                        pParent = pItem.pParent;
                        if(pParent.pChildLo == pItem) pParent.pChildLo = pChildHi;
                        if(pChildLo == pChildHi) pChildHi.pParent.pChildLo = pItem;
                        pParent = pItem.pParent;
                        pItem.pParent = pChildHi.pParent;
                        pChildHi.pParent = pParent;

                        MinValidValue++;
                    }
                }
            }

            private void InsertNewBranchAndRebalance(int Value1, int Value2) {
                THTreeItem pChildHi, pChildLo;
                THTreeItem pLastItem = MainItem.pPrev;

                pChildHi = CreateNewItem(Value1, pLastItem.Weight, false);
                pChildHi.pParent = pLastItem;
                ItemsByByte[Value1] = pChildHi;

                pChildLo = CreateNewItem(Value2, 0, false);
                pChildLo.pParent = pLastItem;
                pLastItem.pChildLo = pChildLo;
                ItemsByByte[Value2] = pChildLo;
                IncWeightsAndRebalance(pChildLo);
            }

            private bool EncodeOneByte(TOutputStream sOut, THTreeItem pItem) {
                THTreeItem pParent = pItem.pParent;
                int BitBuffer = 0;
                int BitCount = 0;

                while(pParent != null) {
                    BitBuffer = (BitBuffer << 1) | ((pParent.pChildLo != pItem) ? 1 : 0);
                    BitCount++;
                    pItem = pParent;
                    pParent = pParent.pParent;
                }
                return sOut.PutBits(BitBuffer, BitCount);
            }

            private int DecodeOneByte(TInputStream sIn) {
                THTreeItem pItemLink = null;
                THTreeItem pItem;
                int ItemLinkIndex;
                int BitCount = 0;

                if(sIn.EndOfStream && sIn.BitCount < 7) return 0x1FF;
                ItemLinkIndex = sIn.Peek7Bits();

                if(QuickLinks[ItemLinkIndex].ValidValue > MinValidValue) {
                    if(QuickLinks[ItemLinkIndex].ValidBits <= 7) {
                        sIn.SkipBits(QuickLinks[ItemLinkIndex].ValidBits);
                        return QuickLinks[ItemLinkIndex].DecompressedValue;
                    }
                    pItem = QuickLinks[ItemLinkIndex].pItem;
                    sIn.SkipBits(7);
                } else {
                    if(MainItem.pNext == MainItem) return 0x1FF;
                    pItem = MainItem.pNext;
                }

                while(pItem.pChildLo != null) {
                    pItem = sIn.Get1Bit() != 0 ? pItem.pChildLo.pPrev : pItem.pChildLo;
                    BitCount++;
                    if(BitCount == 7) pItemLink = pItem;
                }

                if(QuickLinks[ItemLinkIndex].ValidValue < MinValidValue) {
                    if(BitCount > 7) {
                        QuickLinks[ItemLinkIndex].ValidValue = MinValidValue;
                        QuickLinks[ItemLinkIndex].ValidBits = BitCount;
                        QuickLinks[ItemLinkIndex].pItem = pItemLink;
                    } else {
                        ItemLinkIndex = (BitCount != 0) ? ItemLinkIndex & (-1/*(0xFFFFFFFF)*/ >> (32 - BitCount)) : 0;
                        while(ItemLinkIndex < LINK_ITEM_COUNT) {
                            QuickLinks[ItemLinkIndex].ValidValue = MinValidValue;
                            QuickLinks[ItemLinkIndex].ValidBits = BitCount;
                            QuickLinks[ItemLinkIndex].DecompressedValue = pItem.DecompressedValue;
                            ItemLinkIndex += (1 << BitCount);
                        }
                    }
                }
                return pItem.DecompressedValue;
            }

            public int Compress(int CompressionType) {
                TOutputStream Out = new TOutputStream(sOut);
                byte InputByte;

                BuildTree(CompressionType);
                bIsCmp0 = (CompressionType == 0);
                if(Out.PutBits(CompressionType, 8)) return -1;

                while(!sIn.Read(out InputByte)) {
                    if(ItemsByByte[InputByte] == null) {
                        if(EncodeOneByte(Out, ItemsByByte[0x101])) return -1;
                        if(Out.PutBits(InputByte, 8)) return -1;
                        InsertNewBranchAndRebalance(MainItem.pPrev.DecompressedValue, InputByte);

                        if(bIsCmp0) {
                            IncWeightsAndRebalance(ItemsByByte[InputByte]);
                            continue;
                        }
                        IncWeightsAndRebalance(ItemsByByte[InputByte]);
                    } else
                        if(EncodeOneByte(Out, ItemsByByte[InputByte])) return -1;
                    if(bIsCmp0) IncWeightsAndRebalance(ItemsByByte[InputByte]);
                }
                if(EncodeOneByte(Out, ItemsByByte[0x100])) return -1;
                if(Out.Flush()) return -1;
                return sOut.Position;
            }

            public int Decompress() {
                TInputStream In = new TInputStream(sIn);
                int DecompressedValue = 0;
                int CompressionType = 0;

                CompressionType = In.Get8Bits();
                if(In.EndOfStream) return 0;
                bIsCmp0 = (CompressionType == 0);
                BuildTree(CompressionType);

                while((DecompressedValue = DecodeOneByte(In)) != 0x100) {
                    if(DecompressedValue == 0x1FF) return 0;
                    if(DecompressedValue == 0x101) {
                        DecompressedValue = In.Get8Bits();
                        InsertNewBranchAndRebalance(MainItem.pPrev.DecompressedValue, DecompressedValue);
                        if(!bIsCmp0) IncWeightsAndRebalance(ItemsByByte[DecompressedValue]);
                    }
                    if(sOut.Write((byte)DecompressedValue)) return -1;
                    if(bIsCmp0) IncWeightsAndRebalance(ItemsByByte[DecompressedValue]);
                }
                return sOut.Position;
            }
        }
    }
}